给定一个字符串str，计算如果想把str全部切成回文子串，至少需要切多少次？
例如：
"ABA"不需要切割，它本身就是回文串，所以返回0；
"ACDCDCDAD"最少需要切2次变成3个回文子串，例如："A","CDCDC"和"DAD"。所以返回2；

解答：
难度：尉
本题是一个经典的动态规划的题目。定义动态规划数组dp，dp[i]的含义是：子串str[i..len-1]至少需要切割几次，才能把str[i..len-1]全部切成回文子串。那么dp[0]的值就是我们最后想要的结果。
从后往前依次计算dp[i]的值(i初始为len-1，i--)，那么如何计算dp[i]呢？
1，dp[i]的含义是子串str[i..len-1]至少需要切割几次，才能把str[i..len-1]全部切成回文子串
2，假设j位置处在i位置与最后位置之间(i<=j<len)，如果str[i..j]是回文串，那么dp[i]的值就可以是dp[j+1]+1。它含义是在str[i..len-1]上，既然str[i..j]是一个回文串，那么它可以自己作为一个分割的部分。剩下的部分(str[j+1..len-1])继续做最经济的切割，而剩下部分的最经济的值就是dp[j+1]。
3，根据步骤2的方式，让j在位置i到位置len-1上枚举，那么所有情况下的最小值就是dp[i]的值。dp[i] = Min{dp[j+1]+1 (i<=j<len，且str[i..j]必须是回文串)}
如何方便快速的判断str[i..j]是否是回文串呢？具体过程如下：
1，定义一个二维数组boolean[][] isP，如果isP[i][j]值为true，说明字符串str[i..j]是否是回文串；否则不是回文串；
2，我们希望在计算dp数组的过程中，能够同步、快速的计算出isP矩阵；
3，isP[i][j]为true时，一定是以下三种情况：
	1）如果str[i..j]就由1个字符组成，它自然是回文串；
	2）如果str[i..j]就由2个字符组成，且这2个字符相等，同样是回文串；
	2）如果str[i+1..j-1]是回文串(isP[i+1][j-1]==true)且str[i]==str[j]时，str[i..j]也是回文串；
4，在计算dp数组的过程中，位置i是从右向左依次计算的。而对于每一个i来说，又依次从i开始向右枚举所有位置j(i<=j<len)来决策出dp[i]的值。所以对于isP[i][j]来说，isP[i+1][j-1]这个值一定已经计算过了。这就使判断一个子串是否为回文串，变得极为方便。

全部过程请参看如下代码中的minCut方法。

	public static int minCut(String str) {
		if (str == null || str.equals("")) {
			return 0;
		}
		char[] sArr = str.toCharArray();
		int len = sArr.length;
		int[] dp = new int[len + 1];
		dp[len] = -1;
		boolean[][] isP = new boolean[len][len];
		for (int i = len - 1; i >= 0; i--) {
			dp[i] = Integer.MAX_VALUE;
			for (int j = i; j < len; j++) {
				if (sArr[i] == sArr[j] && (j - i < 2 || isP[i + 1][j - 1])) {
					isP[i][j] = true;
					dp[i] = Math.min(dp[i], dp[j + 1] + 1);
				}
			}
		}
		return dp[0];
	}